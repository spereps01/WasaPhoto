openapi: 3.0.3
info:
  title: WasaPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
    upload your photos directly from your PC, and they will be visible to everyone following you.
  version: "1"


tags:
- name: "Login"
  description: "Log-in section"
- name: "Profile"
  description: "All the operation you can do on your profile"
- name: "User Operations"
  description: "All the operations that can be done on the profiles of other users"
- name: "Photo Operations"
  description: "Section dedicated to photo operations"
- name: "Stream"
  description: "Home section"
- name: Search
  description: "Search section"

#CAMBIA  PATH DELETE

paths:
  /session:
    post:
      security:
        - bearerAuth: []
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "^.*?$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile/properties/id"





  /search/{username}: 
    get:
      security:
        - bearerAuth: []
      tags: ["Search"]
      operationId: getUserProfile
      summary: returns info profile
      description: |-
        Given the username as input, 
        if it exists it returns the user's profile info

      parameters: 
        - name: username
          in: path
          required: true
          description: username
          schema: { $ref: "#/components/schemas/Profile/properties/username" }
      
      responses:
        "200":
          description: profile info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"

        "404":
          description: "User not found"

  /profile/{username}:

    put:
      security:
        - bearerAuth: []
      tags: ["Profile"]
      operationId: setMyUserName
      summary: change username
      description: |-
        Given a username as input, this operation allows you to change it
        with the username specified in the body of the request.

      parameters: 
        - name: username
          in: path
          required: true
          description: user name to change
          schema: { $ref: "#/components/schemas/Profile/properties/username" }

      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Profile/properties/username" }


      responses:
        "200":
          description: Username changed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile/properties/username" }
        "404":
          description: "User not found"

#ritornabio
  /profile/bio:
    get:
      security:
        - bearerAuth: []
      tags: ["Profile"]
      operationId: "getMyBio"
      summary: returns the user bio
      description: |- 
        Returns a brief biography of the personal user

      responses:
        "200":
          description: user bio
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile/properties/Bio"  

#modificaBio

    put:
      security:
       - bearerAuth: []
      tags: ["Profile"]
      operationId: setMyBio
      summary: change the bio
      description: |-
        This operation allows you to change the bio of the
        personal user with the bio specified
        in the body of the request.

      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Profile/properties/Bio" }


      responses:
        "200":
          description: Bio changed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile/properties/Bio" }



  /photo:
    post:
      security:
       - bearerAuth: []
      tags : ["Profile"]
      operationId: "uploadPhoto"
      summary: upload an image
      description: |-
        upload a new photo with the properties specified in the
        requestBody

      parameters:
        - name: photo
          in: query
          required: true
          description: file with the photo
          content:
            image/png:
              schema:
                type: string
                format: binary
                minLength: 0
                maxLength: 1223


      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Photo" }

      responses:
        "201":
          description: Foto caricata correttamente
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }


  /profile/{id}/photo/{idPhoto}:
    delete:
      security:
        - bearerAuth: []
      tags : ["Profile"]
      operationId: "deletePhoto"
      summary: remove a photo
      description: |-
        remove a photo from the personal profile

      parameters: 

        - name: id
          in: path
          required: true
          description: nome dell'utente
          schema: { $ref: "#/components/schemas/Profile/properties/id" }

        - name: idPhoto
          in: path
          required: true
          description: id of the photo to delete
          schema: { $ref: "#/components/schemas/Photo/properties/PhotoID" }



      responses:
        "204":
          description: photo removed successfully

        
#getMyStream
  /stream:
    get:
      security:
       - bearerAuth: []
      tags: ["Stream"]
      operationId: getMyStream
      summary: returns the stream
      description: |-
        Returns the photos of all the users I follow
      
      responses:
        "200":
          description: stream
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Photo" }  
                minItems: 0 
                maxItems: 5000



  /users/{id}/bio:
    get:
      security:
        - bearerAuth: []
      tags: ["User Operations"]
      operationId: "getUserBio"
      summary: returns the user bio
      description: |- 
        Returns a brief biography of the user searched

      parameters: 
        - name: id
          in: path
          required: true
          description: id of the user to follow
          schema: { $ref: "#/components/schemas/Profile/properties/id" }


      responses:
        "200":
          description: user bio
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Profile/properties/Bio" 




  /users/{p_id}/follow/{id}:
    parameters: 
      - name: p_id
        in: path
        required: true
        description: personal id
        schema: { $ref: "#/components/schemas/Profile/properties/id" }
    
      - name: id
        in: path
        required: true
        description: id of the user to follow
        schema: { $ref: "#/components/schemas/Profile/properties/id" }

    put: 
      security:
        - bearerAuth: []
      tags : ["User Operations"]
      operationId: "followUser"
      description: |-
        represents the operation of following a user,
        giving the username as input
      summary: follow a user 
      


      responses:
        "200":
          description: updated profile info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "404":
          description: "user not found"

    delete: 
      security:
        - bearerAuth: []
      tags : ["User Operations"]
      operationId: "unfollowUser"
      description: |-
        represents the operation of unfollowing a user
      summary: unfollow a user 
      

      responses:
        "200":
          description: updated profile info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"

        "404":
          description: "user not found"

#banna

  /users/{userId}/ban/{banId}:
    parameters: 
      - name: userId
        in: path
        required: true
        description: identifier of theuser who ban
        schema: { $ref: "#/components/schemas/Profile/properties/id" }
      - name: banId
        in: path
        required: true
        description: user banned
        schema: { $ref: "#/components/schemas/Profile/properties/id" }
    put: 
      security:
        - bearerAuth: []
      tags : ["User Operations"]
      operationId: "banUser"
      description: |-
        Represents the operation of banning a user. 
        The banned user will no longer be able to see 
        your profile details

      summary: ban a user
      
      
      responses:
        "200":
          description: updated profile info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"


        "404":
          description: "user not found"


    delete:
      security:
        - bearerAuth: [] 
      tags : ["User Operations"]
      operationId: "unbanUser"
      description: |-
        Represents the operation of removing the ban from a user. 
        The user will now be able to see your profile info
      summary: remove the ban
      

      responses:
        "204":
          description: user unbanned successfully

    
        "404":
          description: "user not found"



  /photo/{PhotoID}/comment/{id}: 
    parameters:
      - name: PhotoID
        in: path
        required: true
        description: Photo id to comment
        schema: { $ref: "#/components/schemas/Photo/properties/PhotoID" }
      - name: id
        in: path
        required: true
        description: comment id
        schema: { $ref: "#/components/schemas/comment/properties/id_comment" }
    put: 
      security:
        - bearerAuth: []
      tags: ["Photo Operations"]
      operationId: "commentPhoto"
      summary: Comment a photo
      description: |-
        Add a new comment on a user photo


      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/comment" }

      responses:
        "200":
          description: updated photo info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"    


    delete:
      security:
        - bearerAuth: []
      tags : ["Photo Operations"]
      operationId: "uncommentPhoto"
      summary: delete a comment
      description: |-
        Delete a comment previously added on a user photo




      responses:
        "204": 
          description: comment deleted successfully


#aggiungi like
  /photo/{PhotoID}/like/{id}: 
    parameters:
      - name: PhotoID
        in: path
        required: true
        description: photo id to like
        schema: { $ref: "#/components/schemas/Photo/properties/PhotoID" }
      - name: id
        in: path
        required: true
        description: user id 
        schema: { $ref: "#/components/schemas/Profile/properties/id" }
    put: 
      security:
        - bearerAuth: []
      tags: ["Photo Operations"]
      operationId: "likePhoto"
      summary: Like a photo
      description: Add a like ona photo gived as input


      responses:
        "200":
          description: updated photo info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"

#elimina like


    delete:
      security:
        - bearerAuth: []
      tags : ["Photo Operations"]
      operationId: "unlikePhoto"
      summary: remove like
      description: remove a like previouslyadded on a photo



      responses:
        "204": 
          description: like removed successfully




components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer



  schemas:
    Profile:
      title: Profile
      description: This object represent a profile
      type: object
      properties:
        username:
          description: user name
          type: string
          example: peppecarnicella
          pattern: "^.*?$"
          minLength: 3
          maxLength: 16
        id:
          description: user identifier
          type: integer
          example: 1950329

        Bio:
          title: Bio
          description: -|
            This object summarizes the biography
            of the user
          type: object
          properties:
            age:
              description: user age
              type: integer
              example: 21
            birthplace:
              description: where the user is born
              type: string
              pattern:  "^.*?$"
              example: Rome
              minLength: 3
              maxLength: 16
            hobby:
              description: user hobby
              type: string
              example: singing 
              pattern:  "^.*?$"
              minLength: 3
              maxLength: 16
            city of residence:
              description: user's city of residence
              type: string
              example: London
              pattern:  "^.*?$"
              minLength: 3
              maxLength: 16


        followers:
          description: user's followers list
          type: array
          items: { $ref: "#/components/schemas/Profile/properties/username"}
          minItems: 0 
          maxItems: 5000
        followings:
          description: user's followings list
          type: array
          items: { $ref: "#/components/schemas/Profile/properties/username"} 
          minItems: 0 
          maxItems: 5000
        banned:
          description: user's banned list
          type: array
          items: { $ref: "#/components/schemas/Profile/properties/username"} 
          minItems: 0 
          maxItems: 5000         

        Photos:
          description: user's photos list
          type: array
          items: { $ref: "#/components/schemas/Photo"}
          minItems: 0 
          maxItems: 5000 
        
    Photo: 
      description: this object represent a photo
      title: Photo
      type: object
      properties:
        PhotoID:
          description: photo identifier
          type: integer
          example: 0010101
        UserID:
          description: user identifier
          type: integer
          example: 1950329
        file:
          description: file containing the photo
          type: string
          example: foto.jpg
          pattern:  "^.*?$"
          minLength: 3
          maxLength: 16


        comments:
          description: list of other users' comments
          type:  array
          items: { $ref: "#/components/schemas/comment"}
          minItems: 0 
          maxItems: 5000 
        likes:
          description: list of other users' likes
          type: array
          items: { $ref: "#/components/schemas/Like"} 
          minItems: 0 
          maxItems: 5000

    comment:
      title: comment
      description: this object represent a comment
      type: object
      
      properties:
        idPhoto:
          description: photo identifier commented
          type: integer
          example: 152790
        owner:
          description: comment's owner
          type: string
          example: Gianfranco
          pattern:  "^.*?$"
          minLength: 3
          maxLength: 16
        comm: 
          description: effective comment
          type: string
          example: Nice Photo
          pattern:  "^.*?$"
          minLength: 3
          maxLength: 16
        id_comment:
          description: comment identifier commented
          type: integer
          example: 152790




    Like:
      title: like
      description: |-
        this object represents a like and is made up of 
        the id of the photo you want to like, 
        the owner of the like and the id of the like.
      type: object

      properties:
        idPhoto:
          description: photo identifier
          type: integer
          example: 1424234
        owner: 
          description: like's owner
          type: string
          example: giacomo
          pattern:  "^.*?$"
          
          minLength: 3
          maxLength: 16


          

